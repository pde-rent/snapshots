# Generic Backup Tool Configuration
# This TOML file contains all configuration options and exclude patterns

[backup]
# Source directory to backup (required)
source = "/path/to/source"

# Destination directory for borg repository (required)  
dest = "/path/to/backup/repository"

# Backup mode: "incremental", "full", or "borg-auto"
# - incremental: Only files changed in time window
# - full: All files (respecting excludes)  
# - borg-auto: Let borg handle deduplication automatically
mode = "incremental"

# Time window for incremental backups (in minutes)
time_window = 5

# Compression type and level
# Options: "none", "lz4", "zstd,1-22", "lzma,0-9"
compression = "zstd,9"

# Use borg deduplication features
use_dedup = true

# Repository passphrase (optional, can also use BORG_PASSPHRASE env var)
# passphrase = "your-secure-passphrase"

[retention]
# Sophisticated retention policy for granular backup preservation
# Keep 1 snapshot every 5 minutes for 1 hour (12 snapshots)
# Then every 30 minutes for a day (48 more snapshots) 
# Then daily for two weeks (14 more snapshots)
# Then monthly for a year (12 more snapshots)
# Then yearly for 5 years (5 more snapshots)

# Borg retention policy (approximate mapping)
hourly = 12    # Keep 12 hourly (covers 5-min intervals for 1 hour)
daily = 14     # Keep 14 daily (covers 2 weeks)
weekly = 4     # Keep 4 weekly (covers 1 month) 
monthly = 12   # Keep 12 monthly (covers 1 year)
yearly = 5     # Keep 5 yearly (covers 5 years)

# Custom granular retention (for future enhancement)
minutes_5_for_hours = 1      # 5-minute snapshots for 1 hour
minutes_30_for_days = 1      # 30-minute snapshots for 1 day
daily_for_weeks = 2          # Daily snapshots for 2 weeks
monthly_for_years = 1        # Monthly snapshots for 1 year
yearly_for_years = 5         # Yearly snapshots for 5 years

[exclude]
# Exclude patterns - files and directories to skip during backup
# Patterns support borg's exclude syntax with recursive matching (**)

# Build and distribution directories (recursive)
patterns = [
    "**/build/",
    "**/dist/", 
    "**/vendors/",
    "**/target/",
    "**/.next/",
    "**/out/",
    "**/public/build/",
    
    # Dependencies and packages (recursive)
    "**/node_modules/",
    "**/.deps/",
    "**/site-packages/",
    "**/__pycache__/",
    "**/.pnpm-store/",
    
    # Python virtual environments (recursive)
    "**/.venv/",
    "**/venv/",
    "**/env/", 
    "**/.env/",
    "**/virtualenv/",
    
    # Version control directories (recursive)
    "**/.git/",
    "**/.svn/",
    "**/.hg/",
    "**/.bzr/",
    
    # Cache and temporary directories (recursive)
    "**/cache/",
    "**/.cache/",
    "**/tmp/",
    "**/temp/",
    "**/.tmp/",
    "**/htmlcov/",
    "**/coverage/",
    "**/.nyc_output/",
    "**/.tox/",
    "**/.pytest_cache/",
    "**/.mypy_cache/",
    "**/.ruff_cache/",
    "**/.eslintcache",
    
    # IDE and editor files (recursive)
    "**/.vscode/",
    "**/.idea/",
    "**/*.swp",
    "**/*.swo", 
    "**/*~",
    "**/.DS_Store",
    "**/Thumbs.db",
    
    # Logs and temporary files (recursive)
    "**/*.log",
    "**/*.tmp",
    "**/*.temp", 
    "**/*.pid",
    "**/*.lock",
    
    # Python compiled files (recursive)
    "**/*.pyc",
    "**/*.pyo",
    "**/*.pyd",
    
    # JavaScript/Node.js (recursive)
    "**/npm-debug.log*",
    "**/yarn-debug.log*", 
    "**/yarn-error.log*",
    
    # Package manager lock files (often regenerated, recursive)
    "**/package-lock.json",
    "**/yarn.lock",
    "**/pnpm-lock.yaml",
    "**/Cargo.lock",
    "**/composer.lock",
    "**/poetry.lock",
    
    # OS generated files (recursive)
    "**/.DS_Store?",
    "**/._*",
    "**/.Spotlight-V100",
    "**/.Trashes",
    "**/ehthumbs.db",
    
    # Database files (recursive)
    "**/*.sqlite",
    "**/*.db", 
    "**/*.sqlite3",
    
    # Archives (often temporary, recursive)
    "**/*.zip",
    "**/*.tar.gz",
    "**/*.tar.bz2", 
    "**/*.tar.xz",
    "**/*.rar",
    "**/*.7z",
    
    # Application specific directories (recursive)
    "**/.webpack/",
    "**/.parcel-cache/",
    "**/.nuxt/",
    "**/.output/",
    "**/.vercel/",
    "**/.netlify/",
    
    # Testing and coverage (recursive)
    "**/.coverage",
    "**/.codecov",
    "**/test-results/",
    "**/playwright-report/",
    
    # Documentation builds (recursive)
    "**/docs/_build/",
    "**/site/",
    "**/_site/"
]

# Media files (uncomment if you don't want to backup media files)
# media_patterns = [
#     "*.mp4", "*.avi", "*.mkv",
#     "*.mp3", "*.wav", "*.flac", 
#     "*.jpg", "*.jpeg", "*.png", "*.gif", "*.bmp", "*.tiff"
# ] 